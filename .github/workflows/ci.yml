name: CI

on: push

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          macOS,
          Linux,
          Windows x64,
          Windows x86
        ]
        include:

          - name: macOS
            os: macos-latest
            packages: gcc@10 snappy zstd crc32c gperftools
            cc: gcc-10
            cxx: g++-10
            compiler-cflags:  '-I/usr/local/opt/crc32c/include -I/usr/local/opt/gperftools/include'
            compiler-ldflags: '-L/usr/local/opt/crc32c/lib -L/usr/local/opt/gperftools/lib'

          - name: Linux
            os: ubuntu-latest
            packages: gcc-10 g++-10 libsnappy-dev zlib1g-dev libzstd-dev libgoogle-perftools-dev
            cc: gcc-10
            cxx: g++-10

          - name: Windows x64
            os: windows-latest
            packages: snappy:x64-windows-static-md zlib:x64-windows-static-md zstd:x64-windows-static-md
            cc: cl
            cxx: cl
            cmake-generator: '-G "Visual Studio 16 2019" -A x64'
            cmake-args: '-DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-static-md'

          - name: Windows x86
            os: windows-latest
            packages: snappy:x86-windows-static-md zlib:x86-windows-static-md zstd:x86-windows-static-md
            cc: cl
            cxx: cl
            cmake-generator: '-G "Visual Studio 16 2019" -A Win32'
            cmake-args: '-DCMAKE_TOOLCHAIN_FILE=${VCPKG_INSTALLATION_ROOT}/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x86-windows-static-md'

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install packages (macOS)
        if: runner.os == 'macOS' && matrix.packages
        run: |
          brew install ${{ matrix.packages }}

      - name: Install packages (Linux)
        if: runner.os == 'Linux' && matrix.packages
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.packages }}

      - name: Install packages (Windows)
        if: runner.os == 'Windows' && matrix.packages
        run: |
          vcpkg install ${{ matrix.packages }}
          vcpkg integrate install

      - name: Generate project files
        shell: bash
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          CFLAGS: ${{ matrix.compiler-cflags }}
          LDFLAGS: ${{ matrix.compiler-ldflags }}
        run: |
          cmake \
            ${{ matrix.cmake-generator }} \
            ${{ matrix.cmake-args }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.cmake-config || 'Release' }} \
            -DBUILD_SHARED_LIBS=${{ matrix.cmake-shared || 'ON' }} \
            -DCMAKE_POSITION_INDEPENDENT_CODE=${{ matrix.cmake-pic || 'ON' }} \
            -DLEVELDB_BUILD_TESTS=OFF \
            -DLEVELDB_BUILD_BENCHMARKS=OFF \
            -S ${{ matrix.build-src || 'leveldb' }} \
            -B ${{ matrix.build-out || 'build' }}

      - name: Compile source code
        shell: bash
        run: |
          cmake --build ${{ matrix.build-out || 'build' }} --parallel --config ${{ matrix.cmake-config || 'Release' }}

          [ '${{ matrix.name }}' == 'Windows x64' ] && mv ${{ matrix.build-out || 'build' }}/${{ matrix.cmake-config || 'Release' }}/leveldb.dll ${{ matrix.build-out || 'build' }}/leveldb-x64.dll || true
          [ '${{ matrix.name }}' == 'Windows x86' ] && mv ${{ matrix.build-out || 'build' }}/${{ matrix.cmake-config || 'Release' }}/leveldb.dll ${{ matrix.build-out || 'build' }}/leveldb-x86.dll || true

      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: leveldb
          path: |
            ${{ matrix.build-out || 'build' }}/libleveldb.so
            ${{ matrix.build-out || 'build' }}/libleveldb.dylib
            ${{ matrix.build-out || 'build' }}/leveldb-x64.dll
            ${{ matrix.build-out || 'build' }}/leveldb-x86.dll
          if-no-files-found: error
